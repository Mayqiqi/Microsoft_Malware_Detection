from pyspark.sql import SparkSession
from pyspark.sql.functions import col, when
from pyspark.ml.regression import LinearRegression
from pyspark.ml.evaluation import RegressionEvaluator, BinaryClassificationEvaluator, MulticlassClassificationEvaluator

from pyspark.sql.types import DoubleType

spark = SparkSession.builder \
    .appName("Linear Regression with Spark") \
    .config("spark.executor.memory", "6g") \
    .config("spark.memory.fraction", "0.6") \
    .config("spark.memory.storageFraction", "0.5") \
    .config("spark.driver.memory", "4g") \
    .config("spark.executor.cores", "2") \
    .getOrCreate()


train_data = spark.read.parquet("../data/clean_train_data.parquet")
test_data = spark.read.parquet("../data/clean_test_data.parquet")
data_for_local_test = spark.read.parquet("../data/data_for_local_test.parquet")


lr = LinearRegression(featuresCol="features", labelCol="HasDetections")
lr_model = lr.fit(train_data)
predictions = lr_model.transform(test_data)
# lr_model.write().save("../models/linear_model")

predictions = predictions.select("MachineIdentifier", "prediction")
binary_predictions = predictions.withColumn("binary_prediction", when(col("prediction") >= 0.5, 1).otherwise(0))
final_predictions = binary_predictions.withColumnRenamed("binary_prediction", "HasDetections")
final_predictions = final_predictions.select("MachineIdentifier", "HasDetections")
final_predictions.show()

# final_predictions.coalesce(1).write.csv("../submissions/linear_model_prediction.csv", header=True, mode="overwrite")



##### test linear model performance
local_test_predictions = lr_model.transform(data_for_local_test)
local_test_predictions = local_test_predictions.withColumn("binary_prediction", when(col("prediction") >= 0.5, 1).otherwise(0).cast(DoubleType()))
# 初始化评估器并计算 MSE 和 RMSE
evaluator = RegressionEvaluator(labelCol="HasDetections", predictionCol="binary_prediction", metricName="mse")
mse = evaluator.evaluate(local_test_predictions)
print("Mean Squared Error (MSE) on test data = %g" % mse)

spark.stop()