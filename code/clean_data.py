from pyspark.ml import Pipeline
from pyspark.ml.feature import StringIndexer, OneHotEncoder, VectorAssembler
from pyspark.sql.types import StringType, DoubleType, IntegerType
from pyspark.sql.functions import col
from pyspark.sql import SparkSession

# Create Spark and config it
spark = SparkSession.builder.appName("MalwarePrediction") \
    .config("spark.executor.memory", "10g") \
    .config("spark.memory.fraction", "0.6") \
    .config("spark.memory.storageFraction", "0.5") \
    .config("spark.driver.memory", "8g") \
    .config("spark.executor.cores", "6") \
    .config("spark.kryoserializer.buffer.max", "1g") \
    .getOrCreate()


train_data = spark.read.parquet("../data/no_null_train_data.parquet")
test_data = spark.read.parquet("../data/no_null_test_data.parquet")

column_dtypes = {
    "MachineIdentifier":                                    StringType(),
    "ProductName":                                          StringType(),
    "EngineVersion":                                        StringType(),
    "AppVersion":                                           StringType(),
    "AvSigVersion":                                         StringType(),
    "IsBeta":                                               IntegerType(),
    "RtpStateBitfield":                                     IntegerType(),
    "IsSxsPassiveMode":                                     IntegerType(),
    "AVProductStatesIdentifier":                            IntegerType(),
    'AVProductsInstalled':                                  IntegerType(),
    'AVProductsEnabled':                                    IntegerType(),
    'HasTpm':                                               IntegerType(),
    'CountryIdentifier':                                    IntegerType(),
    'CityIdentifier':                                       IntegerType(),
    'OrganizationIdentifier':                               IntegerType(),
    'GeoNameIdentifier':                                    IntegerType(),
    'LocaleEnglishNameIdentifier':                          IntegerType(),
    'Platform':                                             StringType(),
    'Processor':                                            StringType(),
    'OsVer':                                                StringType(),
    'OsBuild':                                              IntegerType(),
    'OsSuite':                                              IntegerType(),
    'OsPlatformSubRelease':                                 StringType(),
    'OsBuildLab':                                           StringType(),
    'SkuEdition':                                           StringType(),
    'IsProtected':                                          IntegerType(),
    'AutoSampleOptIn':                                      IntegerType(),
    'SMode':                                                IntegerType(),
    'IeVerIdentifier':                                      IntegerType(),
    'SmartScreen':                                          StringType(),
    'Firewall':                                             IntegerType(),
    'UacLuaenable':                                         IntegerType(),
    'Census_MDC2FormFactor':                                StringType(),
    'Census_DeviceFamily':                                  StringType(),
    'Census_OEMNameIdentifier':                             IntegerType(),
    'Census_OEMModelIdentifier':                            IntegerType(),
    'Census_ProcessorCoreCount':                            IntegerType(),

    'Census_ProcessorManufacturerIdentifier':               IntegerType(),
    'Census_ProcessorModelIdentifier':                      IntegerType(),
    'Census_PrimaryDiskTotalCapacity':                      IntegerType(),
    'Census_PrimaryDiskTypeName':                           StringType(),
    'Census_SystemVolumeTotalCapacity':                     IntegerType(),
    'Census_HasOpticalDiskDrive':                           IntegerType(),
    'Census_TotalPhysicalRAM':                              IntegerType(),
    'Census_ChassisTypeName':                               StringType(),
    'Census_InternalPrimaryDiagonalDisplaySizeInInches':    IntegerType(),
    'Census_InternalPrimaryDisplayResolutionHorizontal':    IntegerType(),
    'Census_InternalPrimaryDisplayResolutionVertical':      IntegerType(),
    'Census_PowerPlatformRoleName':                         StringType(),
    'Census_InternalBatteryNumberOfCharges':                IntegerType(),
    'Census_OSVersion':                                     StringType(),
    'Census_OSArchitecture':                                StringType(),
    'Census_OSBranch':                                      StringType(),
    'Census_OSBuildNumber':                                 IntegerType(),
    'Census_OSBuildRevision':                               IntegerType(),
    'Census_OSEdition':                                     StringType(),
    'Census_OSSkuName':                                     StringType(),
    'Census_OSInstallTypeName':                             StringType(),
    'Census_OSInstallLanguageIdentifier':                   IntegerType(),
    'Census_OSUILocaleIdentifier':                          IntegerType(),
    'Census_OSWUAutoUpdateOptionsName':                     StringType(),
    'Census_IsPortableOperatingSystem':                     IntegerType(),
    'Census_GenuineStateName':                              StringType(),
    'Census_ActivationChannel':                             StringType(),
    'Census_IsFlightsDisabled':                             IntegerType(),
    'Census_FlightRing':                                    StringType(),
    'Census_FirmwareManufacturerIdentifier':                IntegerType(),
    'Census_FirmwareVersionIdentifier':                     IntegerType(),
    'Census_IsSecureBootEnabled':                           IntegerType(),
    'Census_IsVirtualDevice':                               IntegerType(),
    'Census_IsTouchEnabled':                                IntegerType(),
    'Census_IsPenCapable':                                  IntegerType(),
    'Census_IsAlwaysOnAlwaysConnectedCapable':              IntegerType(),
    'Wdft_IsGamer':                                         IntegerType(),
    'Wdft_RegionIdentifier':                                IntegerType(),

}


for column, column_type in column_dtypes.items():
    train_data = train_data.withColumn(column, col(column).cast(column_type))
    test_data = test_data.withColumn(column, col(column).cast(column_type))
    if column_type == StringType():
        train_data = train_data.na.fill({column: "unknown"})
        test_data = test_data.na.fill("unknown")
    elif column_type == DoubleType():
        train_data = train_data.na.fill({column: 0.00})
        test_data = test_data.na.fill({column: 0.00})
    elif column_type == IntegerType():
        train_data = train_data.na.fill({column: 0})
        test_data = test_data.na.fill({column: 0})

train_data, data_for_local_test = train_data.randomSplit([0.8, 0.2])
train_data = train_data.repartition(100)
test_data = test_data.repartition(100)
train_data.withColumn("HasDetections", col("HasDetections").cast(IntegerType()))
data_for_local_test.withColumn("HasDetections", col("HasDetections").cast(IntegerType()))


numeric_cols = []
categorical_columns = []
for column, dtype in column_dtypes.items():
    if column == "MachineIdentifier":
        continue
    if isinstance(dtype, StringType):
        categorical_columns.append(column)
    elif isinstance(dtype, IntegerType):
        numeric_cols.append(column)


# index and encode categorical data in batches to save running time
batch_size = 3
for i in range(0, len(categorical_columns), batch_size):
    batch_columns = categorical_columns[i:i + batch_size]
    stages = []
    for c in batch_columns:
        stringIndexer = StringIndexer(inputCol=c, outputCol=c + "_index",
                                      handleInvalid='keep')
        encoder = OneHotEncoder(inputCols=[stringIndexer.getOutputCol()], outputCols=[c + "_ohe"])
        stages += [stringIndexer, encoder]

    pipeline = Pipeline(stages=stages)

    pipeline_model = pipeline.fit(train_data)
    train_data = pipeline_model.transform(train_data)
    data_for_local_test = pipeline_model.transform(data_for_local_test)
    test_data = pipeline_model.transform(test_data)

# create assembler
assembler_inputs = [c + "_ohe" for c in categorical_columns] + numeric_cols
assembler = VectorAssembler(inputCols=assembler_inputs, outputCol="features")

# apply vector assembler
train_data = assembler.transform(train_data)
data_for_local_test = assembler.transform(data_for_local_test)
test_data = assembler.transform(test_data)

# save data into local directory
train_data.write.parquet("../data/clean_train_data.parquet_17")
test_data.write.parquet("../data/clean_test_data.parquet_17")
data_for_local_test.write.parquet("../data/data_for_local_test.parquet")


spark.stop()
